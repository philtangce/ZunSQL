读写事务
#define TT_READ 1
#define TT_WRITE 2
数据类型
#define CT_INT 1
#define CT_STRING 2
二级锁
#define LO_LOCKED 1
#define LO_SHARED 2
1. interface database
public：
database()
本类的构造函数,主要实现对属性的初始化赋值。

~database()
本类的析构函数,主要实现对属性的删除。

table ZunTable；（由于只有一张表，因此直接将此表作为database的一个属性，可为空）
用于存储所有建立的表。
初值为空

bool BeginTrans(int TransType);
开始一个事务,TransType表示事务类型
读事务：TT_READ，写事务：TT_WRITE
成功返回true，失败返回false
参数未定，需要下层接口PagerBegin()
本层会根据TransType将ZunTable的锁进行设定。（读不上锁，写上排他锁）

bool CommitPhaseOne();
提交事务步骤1
成功返回true，失败返回false
参数未定，需要下层接口PagerCommitPhaseOne()
若PagerCommitPhaseOne()返回true

bool CommitPhaseTwo();
提交事务步骤2
成功返回true，失败返回false
参数未定，需要下层接口PagerCommitPhaseTwo()

bool Rollback();（这个接口主要看下一层的需求）
回滚事务
成功返回true，失败返回false
参数未定，需要下层接口pagerRollback();
本层通过pagerRollback()进行回滚后，再对table重新加载。

cursor CreateCursor();（由于只有一张表，因此，无需传入参数）
添加一个光标
成功返回cursor，失败返回空。

2.interface table
public:
table(List ColumnType，int ColumnNum);（不考虑主键取多列的情况）
本函数为table类的构造函数
ColumnType表示各个列的类型，其中第一列表示key。ColumnNum表示列数。
int:CT_INT
string:CT_STRING

~table();
本函数为table类的析构函数

bool Drop();
删除一张表
成功返回true，失败返回false。

bool Clear();
清空一张表
成功返回true，失败返回false。

private:(这个不是接口)
int Lock;
本变量为锁标记，主要用于标记排他写。
写锁：LO_LOCKED
读锁：LO_SHARED

List ColumnType
表示table属性之列类型

int ColumnNum
表示table属性之列数

3.interface cursor
public：
cursor()
本函数为cursor类的构造函数

~cursor()
本函数为cursor类的析构函数

bool ClearCursor() （感觉没啥必要）
本函数将Cursor置为空
成功返回true，失败返回false。

bool MovetoFirst()
本函数将Cursor指向Btree的第一个元素。
成功返回true，失败返回false。

bool MovetoLast()
本函数将Cursor指向Btree的最后一个元素。
成功返回true，失败返回false。

bool MovetoNext()
本函数将Cursor指向Cursor指向的下一个元素。
成功返回true，失败返回false。

bool MovetoPrevious()
本函数将Cursor指向Cursor指向的上一个元素。
成功返回true，失败返回false。

bool MovetoUnpacked(BaseType key) （如果匹配不到，Cursor指向的位置规则需要确定吗？）
本函数用于将Cursor定位到指定key的位置，如果匹配不到，则将Cursor停在与key值相近的某位置
成功返回true，失败返回false。

bool Delete();
删除节点
成功返回true，失败返回false。

bool Insert(BaseType key,List Data);
插入节点
成功返回true，失败返回false。

int GetKeySize();
获取KeySize
成功返回true，失败返回false。

BaseType GetKey();
获取Key值
成功返回true，失败返回false。

int GetDataSize();
获取数据大小
成功返回true，失败返回false。

List GetData();
获取数据
成功返回data，失败返回空。

bool setData(List);
修改数据
成功返回true，失败返回false。

private：(这个不是接口)
1.table aimtable;
表示目标表，在构造函数中赋值。

4.struct basetype
int type;
type表示该数据的类型，整形或字符串

int value;
若为整形，则使用value进行存取

String Svalue;
若为字符串，则使用Svalue进行存取

限制
整个数据库中只有一张表
不考虑主键为多列的情况
只是用了写锁，排他写


